package provider

import (
	"context"
	"fmt"

	"terraform-provider-propelauth/internal/propelauth"

	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &imageResource{}
var _ resource.ResourceWithConfigure   = &imageResource{}

func NewImageResource() resource.Resource {
	return &imageResource{}
}

// imageResource defines the resource implementation.
type imageResource struct {
	client *propelauth.PropelAuthClient
}

// imageResourceModel describes the resource data model.
type imageResourceModel struct {
	Source types.String `tfsdk:"source"`
	Version types.String `tfsdk:"version"`
	ImageType types.String `tfsdk:"image_type"`
	ImageId types.String `tfsdk:"image_id"`
	ImageUrl types.String `tfsdk:"image_url"`
}

func (r *imageResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_image"
}

func (r *imageResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Image for PropelAuth hosted pages.",
		Attributes: map[string]schema.Attribute{
			"source": schema.StringAttribute{
				Required: true,
				Description: "The path to a local file of the image.",
			},
			"version": schema.StringAttribute{
				Required: true,
				Description: "The version of the image. This is track updates to the image at the specified `source`.",
			},
			"image_type": schema.StringAttribute{
				Required: true,
				Description: "The type of the image. This is used to determine where the image is used in PropelAuth. " +
					"Accepted values are `logo`, `favicon`, and `background`.",
				Validators: []validator.String{
					stringvalidator.OneOf("logo", "favicon", "background"),
				},
			},
			"image_id": schema.StringAttribute{
				Computed: true,
				Description: "The unique identifier of the image. This is generated by PropelAuth.",
			},
			"image_url": schema.StringAttribute{
				Computed: true,
				Description: "The URL of the image. This is generated by PropelAuth.",
			},
		},
	}
}

func (r *imageResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*propelauth.PropelAuthClient)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *propelauth.PropelAuthClient, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *imageResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan imageResourceModel

	// Read Terraform plan data into the model
	diags := req.Plan.Get(ctx, &plan)
    resp.Diagnostics.Append(diags...)
    if resp.Diagnostics.HasError() {
        return
    }

	// Upload the image in PropelAuth
    imageUploadResponse, err := r.client.UploadImage(plan.ImageType.ValueString(), plan.Source.ValueString())
    if err != nil {
        resp.Diagnostics.AddError(
            "Error uploading image to propelauth",
            "Could not upload image, unexpected error: "+err.Error(),
        )
        return
    }

	// Save updated state into Terraform state
	plan.ImageId = types.StringValue(imageUploadResponse.ImageId)

	// Update the PropelAuth environment config
	environmentConfigUpdate := propelauth.EnvironmentConfigUpdate{}
	if plan.ImageType.ValueString() == "logo" {
		environmentConfigUpdate.LogoImageId = plan.ImageId.ValueString()
	} else if plan.ImageType.ValueString() == "favicon" {
		environmentConfigUpdate.FaviconImageId = plan.ImageId.ValueString()
	} else if plan.ImageType.ValueString() == "background" {
		environmentConfigUpdate.BackgroundImageId = plan.ImageId.ValueString()
	}

    environmentConfigResponse, err := r.client.UpdateEnvironmentConfig(&environmentConfigUpdate)
    if err != nil {
        resp.Diagnostics.AddError(
            "Error propelauth configuration with image",
            "Could not update the configuration with the latest image id, unexpected error: "+err.Error(),
        )
        return
    }

	// Save updated URL into Terraform state
	if plan.ImageType.ValueString() == "logo" {
		plan.ImageUrl = types.StringValue(environmentConfigResponse.LogoUrl)
	} else if plan.ImageType.ValueString() == "favicon" {
		plan.ImageUrl = types.StringValue(environmentConfigResponse.FaviconUrl)
	} else if plan.ImageType.ValueString() == "background" {
		plan.ImageUrl = types.StringValue(environmentConfigResponse.BackgroundUrl)
	}

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "created a propelauth_image resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}

func (r *imageResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Get current state and read it into the model
	var state imageResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// retrieve the environment config from PropelAuth
	environmentConfigResponse, err := r.client.GetEnvironmentConfig()
	if err != nil {
        resp.Diagnostics.AddError(
            "Error Reading PropelAuth configuration",
            "Could not read PropelAuth configuration: " + err.Error(),
        )
        return
    }
	if state.ImageType.ValueString() == "logo" {
		state.ImageUrl = types.StringValue(environmentConfigResponse.LogoUrl)
	} else if state.ImageType.ValueString() == "favicon" {
		state.ImageUrl = types.StringValue(environmentConfigResponse.FaviconUrl)
	} else if state.ImageType.ValueString() == "background" {
		state.ImageUrl = types.StringValue(environmentConfigResponse.BackgroundUrl)
	}
	
	// Save updated state into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (r *imageResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan imageResourceModel

	// Read Terraform plan data into the model
	diags := req.Plan.Get(ctx, &plan)
    resp.Diagnostics.Append(diags...)
    if resp.Diagnostics.HasError() {
        return
    }

	// Upload the image in PropelAuth
    imageUploadResponse, err := r.client.UploadImage(plan.ImageType.ValueString(), plan.Source.ValueString())
    if err != nil {
        resp.Diagnostics.AddError(
            "Error uploading image to propelauth",
            "Could not upload image, unexpected error: "+err.Error(),
        )
        return
    }
	// Save updated state into Terraform state
	plan.ImageId = types.StringValue(imageUploadResponse.ImageId)

	// Update the PropelAuth environment config
	environmentConfigUpdate := propelauth.EnvironmentConfigUpdate{}
	if plan.ImageType.ValueString() == "logo" {
		environmentConfigUpdate.LogoImageId = plan.ImageId.ValueString()
	} else if plan.ImageType.ValueString() == "favicon" {
		environmentConfigUpdate.FaviconImageId = plan.ImageId.ValueString()
	} else if plan.ImageType.ValueString() == "background" {
		environmentConfigUpdate.BackgroundImageId = plan.ImageId.ValueString()
	}

	environmentConfigResponse, err := r.client.UpdateEnvironmentConfig(&environmentConfigUpdate)
	if err != nil {
		resp.Diagnostics.AddError(
			"Error updating propelauth configuration with image",
			"Could not update the configuration with the latest image id, unexpected error: "+err.Error(),
		)
		return
	}

	// Save updated URL into Terraform state
	if plan.ImageType.ValueString() == "logo" {
		plan.ImageUrl = types.StringValue(environmentConfigResponse.LogoUrl)
	} else if plan.ImageType.ValueString() == "favicon" {
		plan.ImageUrl = types.StringValue(environmentConfigResponse.FaviconUrl)
	} else if plan.ImageType.ValueString() == "background" {
		plan.ImageUrl = types.StringValue(environmentConfigResponse.BackgroundUrl)
	}

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "updated a propelauth_image resource")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)
}

func (r *imageResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	tflog.Trace(ctx, "deleted a propelauth_image resource")
}

